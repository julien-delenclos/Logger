{"version":3,"sources":["../index.js"],"names":["Logger","config","level","directory","maxSize","maxFiles","logDebug","logInConsole","logStream","init","processid","process","env","pm_id","stackSeparator","getErrorStack","error","getStack","Error","Object","assign","logger","getLogger","loggerDebug","replace","fileName","fs","mkdir","path","dirname","join","recursive","err","console","winstonLogger","winston","transports","File","filename","handleExceptions","json","timestamp","format","formatter","options","toUpperCase","message","meta","keys","length","JSON","stringify","maxsize","colorize","exitOnError","add","Console","name","debugInfo","log","index","count","splited","stack","split","spliced","splice","map","item","trim","info","instance","module","exports","getInstance"],"mappings":"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","sourcesContent":["import winston from 'winston'\r\nimport moment from 'moment'\r\nimport path from 'path'\r\nimport fs from 'fs'\r\n\r\nclass Logger {\r\n  static instance = null\r\n  static getInstance(){\r\n    if(Logger.instance === null){\r\n      Logger.instance = new Logger()\r\n    }\r\n    return Logger.instance\r\n  }\r\n\r\n  config = {\r\n    level: 'info',\r\n    directory: './log',\r\n    maxSize: 50 * 1024 * 1024,\r\n    maxFiles: 3,\r\n    logDebug: false,\r\n    logInConsole: true,\r\n    logStream: 'App.log',\r\n    init: false\r\n  }\r\n\r\n  init(config) {\r\n    Object.assign(this.config, config)\r\n    this.config.init = true\r\n    this.logger = this.getLogger(this.config.logStream)\r\n    this.loggerDebug = this.getLogger(this.config.logStream.replace(\".log\", \"_debug.log\"))\r\n  }\r\n\r\n  processid = process.env.pm_id || -1\r\n  stackSeparator = \"\\n\"\r\n\r\n  getLogger(fileName) {\r\n    fs.mkdir(path.dirname(path.join(this.config.directory, fileName)), { recursive: true }, err => err && console.error(err))\r\n    let winstonLogger = new winston.Logger({\r\n      transports: [\r\n        new winston.transports.File({\r\n          level: this.config.level,\r\n          filename: path.join(this.config.directory, fileName),\r\n          handleExceptions: true,\r\n          json: false,\r\n          timestamp: function() {\r\n            return moment().format(\"YYYY-MM-DD HH:mm:ss,SSS\");\r\n          },\r\n          formatter: function(options) {\r\n            return (\r\n              options.timestamp() +\r\n              \"\\t[\" +\r\n              options.level.toUpperCase() +\r\n              \"]\\t\" +\r\n              (options.message ? options.message : \"\") +\r\n              (options.meta && Object.keys(options.meta).length ? \"\\n\\t\" + JSON.stringify(options.meta) : \"\")\r\n            );\r\n          },\r\n          maxsize: this.config.maxSize,\r\n          maxFiles: this.config.maxFiles,\r\n          colorize: false\r\n        })\r\n      ],\r\n      exitOnError: false\r\n    })\r\n\r\n    if (this.config.logInConsole) {\r\n      winstonLogger.add(winston.transports.Console, {\r\n        name: \"console-log\",\r\n        level: \"debug\",\r\n        handleExceptions: true,\r\n        json: false,\r\n        colorize: true\r\n      });\r\n    }\r\n\r\n    return winstonLogger\r\n  }\r\n\r\n  log(level, message, error, debugInfo) {\r\n    try {\r\n      if(!this.config.init) throw new Error('call Logger.init before use it')\r\n      if (debugInfo && this.config.logDebug) {\r\n        message = JSON.stringify(message, null, \"\\t\")\r\n        this.loggerDebug[level](`[nodeId=${this.processid}]\\t${message}`, error)\r\n      }\r\n      else if (!debugInfo) {\r\n        this.logger[level](`[nodeId=${this.processid}]\\t${message}`, error)\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n\r\n  getStack(error, index, count) {\r\n    const splited = error.stack.split(this.stackSeparator)\r\n    const spliced = count ? splited.splice(index, count) : splited.splice(index)\r\n    return spliced.map(item => item.trim()).join(this.stackSeparator)\r\n  }\r\n\r\n  getErrorStack = error => error ? this.getStack(error, 1) : this.getStack(new Error(), 3, 1)\r\n\r\n  debug(message, error) {\r\n\t\tthis.log(\"debug\", message, this.getErrorStack(error))\r\n\t}\r\n\tinfoDebug(message, error) {\r\n\t\tthis.log(\"info\", message, \"\", true)\r\n\t}\r\n\tinfo(message, error) {\r\n\t\tthis.log(\"info\", message)\r\n\t}\r\n\twarn(message, error) {\r\n\t\tthis.log(\"warn\", message)\r\n\t}\r\n\terror(message, error) {\r\n\t\tthis.log(\"error\", message, this.getErrorStack(error))\r\n\t}\r\n\twrite(message) {\r\n\t\tthis.logger.info(message)\r\n\t}\r\n}\r\n\r\nmodule.exports = {Logger: Logger.getInstance()}"],"file":"index.js"}